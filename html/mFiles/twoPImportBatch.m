%% twoPImportBatch
% Import and pre-process all PraireView data in current directory
%
% |function twoPImportBatch(d,iniFileName)|
%
%% Purpose
% Call from a root data directory to import all the data it
% contains. I.e. a root data directory is one which contains all
% the TSeries or ZSeries directories generated by PrairieView. This
% routine expects a single parameter file (that produced by
% deliverOdours) in each TSeries directory. If the parameter file
% is missing then certain analysis operations are not performed. 
%
%% Basic function calls
%  |twoPImportBatch(d)| - process .mat files defined by d
%  |twoPImportBatch(iniFileName)| - process all directories in current 
%                                   directory using a defined preference file.
%  |twoPImportBatch(d,iniFileName)| - both are defined 
%
% ** You need to supply at least one argument:
% e.g. twoPImportBatch('default.ini')
%
%% Inputs 
% |d| - optional. If d is missing or empty then all sub-directories are
%     searched for data and imported. If d exists then the import
%     step is not done since the routine assumes that .mat data
%     files have already been created. The location of these files
%     is specified by the structure, d, which can be created, for
%     example, by running d=dir('*.mat') from the root data
%     directory. 
%
% |iniFileName| - path to INI file which defines how the analyses are
%               to be run. If not supplied then a default INI file
%               is used with all the basic (e.g. no warping)
%               analyses done. 
%
% 
%% Detailed function calls
% You can also define param/value pairs with which to run the import. 
% Parameters defined here overrule what is defined in the INI file. Only 
% commonly-altered options are over-ridden at the command line. 
%
%  |twoPImportBatch(d,'param1',val1,...)| 
%  |twoPImportBatch(iniFileName,'param1',val1,...)| 
%  |twoPImportBatch(d,iniFileName,'param1',val1,...)| 
%  |twoPImportBatch([],iniFileName,'param1',val1,...)|
%
% Param/Value pairs:
%
% |motion_correction| - the algorithm used to conduct the registration:
%
% # |ffttrans| - an fft-based sub-pixel translation correction in x and
% y. No rotation correction. Implemented by <apply_ffttrans.html |apply_ffttrans|> This
% is the default.
% # demon - CPU-based non-rigid fluid-like registration.  Options
% for rigid, affine, and non-rigid; as well as various other
% parameters such as fluidity.  see <apply_demon.html |apply_demon|>
% # elastix - elastix is an elaborate image registraion suite
% written in C++. A Matlab wrapper is provided for it. see
% <apply_elastix.html |apply_elastix|>
% # gkerr - Greenberg & Kerr 2-photon optimised correction. 
%         See <apply_gkerr.html |apply_gkerr|> Using coefficients to conduct a
%         translation isn't supported since corrections
%        cannot be generalised across frames. 
% # symmetric - GPU-based non-rigid registration. Doesn't have
%              many options. See <apply_symmetric.html |apply_symmetric|> Using
%              coefficients to conduct a translation isn't
%              supported since this function is the least
%              useful. 
% 

