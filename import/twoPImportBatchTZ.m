function twoPImportBatchTZ(d)
% Import and pre-process all PraireView TZ series data in current directory
%
% function twoPImportBatchTZ(d)
%
% TEMPORARY FILE FOR PROCESSING TZ SERIES. IT'S JUST USED AS A
% MARKER SO THAT I KEEP IN MIND THE STEPS BEING PERFORMED. NOT
% INTENDED FOR GENERAL USE. 
%
% Purpose
% Call from a root data directory to import all the data it
% contains. I.e. a root data directory is one which contains all
% the TSeries or ZSeries directories generated by PrairieView. This
% routine expects a single parameter file (that produced by
% deliverOdours) in each TSeries directory. If the parameter file
% is missing then certain analysis operations are not performed. 
%
%
% Inputs 
% d - optional. If d is missing then all sub-directories are
%     searched for data and imported. If d exists then the import
%     step is not done since the routine assumes that .mat data
%     files have already been created. The location of these files
%     is specified by the structure, d, which can be created, for
%     example, by running d=dir('*.mat') from the root data
%     directory. 
%
%
% Rob Campbell - August, 2010
  
  
  
if nargin==0, d=importPVtree(pwd); end


cwd=pwd;
for ii=1:length(d)

  disp(sprintf('****   %d/%d - Processing %s   ****',...
               ii,length(d),d(ii).name))
  
  load(d(ii).name);  
  if isstruct(data)
      data=generateDFFobject(data);
  end
  
  cd(data(1).info.rawDataDir)
  p=dir('params*.mat');
  if ~isempty(p) %The following only run if there is a params file
      if length(p)==1
          
          load(p.name)
          data=addStimParams(data,params);
  
          %This will pull in PID or ePhys data if it's present.
          %Doesn't intelligently search for it, just use a catch 
          %statement. 
          try
              data=addDatData(data);
          catch
              disp('Can''t add Dat data')
          end

          %Now we do:
          S=findNuclei(data); %find the nuclei in each odour presentation
          final=trackCells(stats,data); %works out where cells ought to be
          addMask(data,final) %add cell masks and centroids to data structure

          addKC_stats(data)  %work out dF/F

          %However, you will first need to do:
for ii=1:length(data),data(ii).dffParams.baseLineTime=0.7;end
          
          %        data=cleanBatch(data);
          %data=alignOverReps(data);
          %data=ROI_batch(data);
            
  
          %The photo-bleach correction must be done last!
          %          data=doPhotoBleachCorrection(data);
      end
  end
  
  cd(cwd)
  save(d(ii).name,'data')
  clear params data


end
  


