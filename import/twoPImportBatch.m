function IN=twoPImportBatch(varargin)
% Import and pre-process all PraireView data in current directory
%
% function twoPImportBatch(d,iniFileName)
%
%
% Purpose
% Call from a root data directory to import all the data it
% contains. i.e. a root data directory is one which contains all
% the TSeries or ZSeries directories generated by PrairieView. This
% routine expects a single parameter file (that produced by
% deliverOdours) in each TSeries directory. If the parameter file
% is missing then certain analysis operations are not performed. 
%
% Note that functions are always run in parallel where possible
% (requires multiple cores and parallel computing toolbox) if you
% have attached multiple cores. Only minor speed improvments may be
% seen on 2-core machines, since many Matlab functions are now
% multi-threaded anyway and will use more than one core by
% default. Multiple cores will only be used if the user has enabled
% this option and connected workers to the local machine at the
% command prompt before executing this function. 
%
% Basic function calls: 
%  twoPImportBatch(d) - process .mat files defined by d
%  twoPImportBatch(iniFileName) - process all directories in current 
%                                directory using a defined preference file.
%  twoPImportBatch(d,iniFileName) - both are defined 
%
% ** You need to supply at least one argument:
% e.g. twoPImportBatch('default.ini')
%
% Inputs 
% d - optional. If d is missing or empty then all sub-directories are
%     searched for data and imported. If d exists then the import
%     step is not done since the routine assumes that .mat data
%     files have already been created. The location of these files
%     is specified by the structure, d, which can be created, for
%     example, by running d=dir('*.mat') from the root data
%     directory. 
%
% iniFileName - path to INI file which defines how the analyses are
%               to be run. If not supplied then a default INI file
%               is used with all the basic (e.g. no warping)
%               analyses done. 
%
% 
% Detailed function calls:
% You can also define param/value pairs with which to run the import. 
% Parameters defined here overrule what is defined in the INI file. Only 
% commonly-altered options are over-ridden at the command line. 
%
%  twoPImportBatch(d,'param1',val1,...) 
%  twoPImportBatch(iniFileName,'param1',val1,...) 
%  twoPImportBatch(d,iniFileName,'param1',val1,...) 
%  twoPImportBatch([],iniFileName,'param1',val1,...) 
%
% Param/Value pairs:
%
% 'motion_correction' - the algorithm used to conduct the registration:
%
%     'ffttrans' - fft-based sub-pixel translation correction in x and
%     y. No rotation correction. Implemented by
%     TOOLBOX_ROOT/registrationFunctions/apply_ffttrans.m This is the default.
%
%     'demon' - CPU-based non-rigid fluid-like registration.  Options
%     for rigid, affine, and non-rigid; as well as various other
%     parameters such as fluidity.  see apply_demon.m
%
%     'elastix' - elastix is an elaborate image registraion suite
%     written in C++.  Matlab wrapper is provided for it, but it
%     doesn't support Windows at the moment. elstix itself is
%     cross-platform, though. see apply_elastix
%
%     'gkerr' - Greenberg & Kerr 2-photon optimised correction. 
%               ../registrationFunctions/apply_gkerr.m
%
%     'symmetric' - GPU-based non-rigid registration. Doesn't have
%                 many options. ../registrationFunctions/apply_symmetric.m
%               ../registrationFunctions/apply_gkerr.m
% 
%
% Rob Campbell - August 2012

defaultINI='default.ini';

if nargin==0
    iniFileName=defaultINI;
end


if mod(nargin,2)>0 %For 1 arg or odd number of args (which means param/val pair)
  if isstruct(varargin{1})
    d=varargin{1}; 
  else
    d=[];
  end
  if isstr(varargin{1})
    iniFileName=varargin{1}; 
  else
    iniFileName=defaultINI;
  end
  varargin(1)=[]; %so the rest are param val pairs
end

if nargin==2 
    if isstruct(varargin{1}) | isempty(varargin{1}) %if true it's not a param
      if isstruct(varargin{1})
          d=varargin{1}; 
       else
          d=[];
      end

    if isstr(varargin{2})
      iniFileName=varargin{2}; 
    else
      iniFileName=defaultINI;
    end
  else
    d=[];
    iniFileName=defaultINI;
   end
end

%Read preferences from INI file
keys=INIkeys2logical(iniFileName);

%Now we can define param/value pairs. All defaults are empty, since they will 
%all be defined elsewhere (either the INI file or child functions). Only non-empty
%values are parsed. The downside is that there is, therefore, no error checking at
%this stage. 

IN=inputParser;

%addOptional(IN,'motion_correction',[])


parse(IN,varargin{:})



%Overwrite INI file options with param/value pair option
r=IN.Results;
f=fields(r);
for ii=1:length(f)
  if isempty(r.(f{ii}))
    keys.import.(f{ii})=r.(f{ii});
  end
end


%Import the raw data if needed
if nargin<1 | isempty(d)
    
    %First search for XML files. If there aren't any then we have a
    %ScanImage directory 
    [a,b]=unix('find . -name ''*.xml'' ');
    if a==0 && isempty(b)
        xml=0;
    end
    
    if xml==0
        d=importSItree(pwd);
    else 
        d=importPVtree(pwd); 
    end
    

    if keys.import.import_only
        disp('Done! Not processing files')
        return
    end

end

if isstr(d)
    d.name=d;
end

%----------------------------------------------------------------------
% Commence import and pre-processing sequence
cwd=pwd;
for ii=1:length(d)

  disp(sprintf('****   %d/%d - Processing %s   ****',...
               ii,length(d),d(ii).name))
  
  load(d(ii).name);  

  if data(1).info.binningMode
      fprintf('Data were acquired using "summing" mode\n');
      normAllImages(data)
  end
  

  
  cd(data(1).info.rawDataDir);
  p=dir('params*.mat');
  if ~isempty(p) %The following only run if there is a params file
      if length(p)==1
          
          load(p.name)

          if keys.import.add_stim
              data=addStimParams(data,params);
          end

          if keys.import.add_dat_data
              %This will pull in PID or ePhys data if it's present.
              %Doesn't intelligently search for it, just use a
              %catch statement. 
              try
                  data=addDatData(data);
              catch
                  disp('Can''t add Dat data')
              end
          end


          if keys.import.filter_stacks
              data=filterImageStack(data);
          end

          if keys.import.stack_correction
              alignStack(data,[1,5],...
                         'verbose',keys.import.verbose,...
                         'algorithm',keys.align_reps.algorithm);
              
              updateMuStack(data); 
          end

          if keys.import.align_over_reps
              alignRepeats(data,keys.import.verbose);
          end
          
          if keys.import.roi_batch
              data=ROI_batch(data);
          end
          
          if keys.import.photobleach
              %The photo-bleach correction must be done last!
              data=doPhotoBleachCorrection(data);
          end
          
      end
    else
      disp('NO PARAMS FILE: NOT PROCESSING!')
  end
  
  %Save the results
  cd(cwd)
  save(d(ii).name,'data')
  fprintf('Saving %s\n',d(ii).name)
  clear params data


end


